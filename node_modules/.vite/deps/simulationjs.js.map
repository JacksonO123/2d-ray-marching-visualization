{
  "version": 3,
  "sources": ["../../.pnpm/simulationjs@2.4.7/node_modules/simulationjs/dist/simulation.js"],
  "sourcesContent": ["// global vars\nlet fps;\nlet currentMousePos;\nlet currentMouseEvent;\nconst validEvents = ['mousemove', 'click', 'hover', 'mouseover', 'mouseleave'];\n\nexport class Vector {\n  /**\n   * @param {number} x\n   * @param {number} y\n   * @param {number} r - optional\n   */\n  constructor(x, y, r = 0) {\n    this.x = x;\n    this.y = y;\n    this.mag = pythag(x, y);\n    this.startAngle = radToDeg(atan2(y, x));\n    this.startX = x;\n    this.startY = y;\n    this.rotation = r;\n    this.#setRotation();\n  }\n  /**\n   * @param {number} deg\n   * @returns {Vector}\n   */\n  rotate(deg) {\n    this.rotation += deg;\n    this.#setRotation();\n    return this;\n  }\n  /**\n   * @param {number} deg\n   * @returns {Vector}\n   */\n  rotateTo(deg) {\n    this.rotation = deg;\n    this.#setRotation();\n    return this;\n  }\n  #setRotation() {\n    this.rotation = minimizeRotation(this.rotation);\n    const deg = this.rotation * (Math.PI / 180);\n    this.x = this.startX * Math.cos(deg) - this.startY * Math.sin(deg);\n    this.y = this.startX * Math.sin(deg) + this.startY * Math.cos(deg);\n  }\n  /**\n   *\n   * @param {CanvasRenderingContext2D} c\n   * @param {Point} pos - optional\n   * @param {Color} color - optional\n   * @param {number} thickness - optional\n   */\n  draw(c, pos = new Point(0, 0), color = new Color(0, 0, 0), thickness = 1) {\n    c.beginPath();\n    c.strokeStyle = color.toHex();\n    c.lineWidth = thickness;\n    c.moveTo(pos.x, pos.y);\n    c.lineTo(pos.x + this.x, pos.y + this.y);\n    c.stroke();\n    c.closePath();\n  }\n  /**\n   * @returns {Vector}\n   */\n  normalize() {\n    if (this.mag != 0) {\n      this.x /= this.mag;\n      this.startX /= this.mag;\n      this.y /= this.mag;\n      this.startY /= this.mag;\n      this.mag = 1;\n    }\n    return this;\n  }\n  /**\n   * @param {number} n\n   * @returns {Vector}\n   */\n  multiply(n) {\n    this.x *= n;\n    this.startX *= n;\n    this.y *= n;\n    this.startY *= n;\n    this.mag *= n;\n    return this;\n  }\n  /**\n   * @param {Vector} v\n   * @returns {Vector}\n   */\n  add(v) {\n    this.x += v.x;\n    this.startX += v.x;\n    this.y += v.x;\n    this.startY += v.x;\n    this.#updateMag();\n    return this;\n  }\n  /**\n   * @param {number} n\n   * @returns {Vector}\n   */\n  multiplyX(n) {\n    this.x *= n;\n    this.startX *= n;\n    this.#updateMag();\n    return this;\n  }\n  /**\n   * @param {number} n\n   * @returns {Vector}\n   */\n  multiplyY(n) {\n    this.y *= n;\n    this.startY *= n;\n    this.#updateMag();\n    return this;\n  }\n  /**\n   * @param {number} n\n   * @returns {Vector}\n   */\n  divide(n) {\n    this.x /= n;\n    this.startX /= n;\n    this.y /= n;\n    this.startY /= n;\n    this.mag /= n;\n    return this;\n  }\n  /**\n   * @param {number} value\n   * @returns {Vector}\n   */\n  appendMag(value) {\n    if (this.mag != 0) {\n      const newMag = this.mag + value;\n      this.normalize();\n      this.multiply(newMag);\n      this.mag = newMag;\n    }\n    return this;\n  }\n  /**\n   * @param {number} value\n   * @returns {Vector}\n   */\n  appendX(value) {\n    this.x += value;\n    this.startX += value;\n    this.#updateMag();\n    return this;\n  }\n  /**\n   * @param {number} value\n   * @returns {Vector}\n   */\n  appendY(value) {\n    this.y += value;\n    this.startY += value;\n    this.#updateMag();\n    return this;\n  }\n  /**\n   * @param {number} value\n   * @returns {Vector}\n   */\n  setX(value) {\n    this.x = value;\n    this.startX = value;\n    this.#updateMag();\n    return this;\n  }\n  /**\n   * @param {number} value\n   * @returns {Vector}\n   */\n  setY(value) {\n    this.y = value;\n    this.startY = value;\n    this.#updateMag();\n    return this;\n  }\n  #updateMag() {\n    this.mag = pythag(this.x, this.y);\n  }\n  /**\n   * @param {number} value\n   * @returns {Vector}\n   */\n  setMag(value) {\n    this.normalize();\n    this.multiply(value);\n    this.mag = value;\n    return this;\n  }\n  /**\n   * @returns {Vector}\n   */\n  clone() {\n    return new Vector(this.x, this.y, this.rotation);\n  }\n  /**\n   * @returns {string}\n   */\n  format() {\n    return `(${this.x}, ${this.y})`;\n  }\n}\n\nexport class SimulationElement {\n  /**\n   * @param {Point} pos\n   * @param {Color} color - optional\n   */\n  constructor(pos, color = new Color(0, 0, 0)) {\n    this.pos = pos;\n    this.color = color;\n    this.sim = null;\n  }\n  /**\n   * @param {HTMLCanvasElement} el\n   */\n  setSimulationElement(el) {\n    this.sim = el;\n  }\n  /**\n   * @param {Color} color\n   * @param {Number} t - optional\n   * @returns {Promise}\n   */\n  fill(color, t = 0) {\n    const currentColor = new Color(this.color.r, this.color.g, this.color.b);\n    const colorClone = color.clone();\n    const changeR = (colorClone.r - this.color.r) / (t * fps);\n    const changeG = (colorClone.g - this.color.g) / (t * fps);\n    const changeB = (colorClone.b - this.color.b) / (t * fps);\n\n    const func = () => {\n      this.color = colorClone;\n    };\n\n    return transitionValues(\n      func,\n      () => {\n        currentColor.r += changeR;\n        currentColor.g += changeG;\n        currentColor.b += changeB;\n        this.color.r = currentColor.r;\n        this.color.g = currentColor.g;\n        this.color.b = currentColor.b;\n      },\n      func,\n      t\n    );\n  }\n  /**\n   * @param {Point} p\n   * @param {Number} t - optional\n   * @returns {Promise}\n   */\n  moveTo(p, t = 0) {\n    const changeX = (p.x - this.pos.x) / (t * fps);\n    const changeY = (p.y - this.pos.y) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.pos = p;\n      },\n      () => {\n        this.pos.x += changeX;\n        this.pos.y += changeY;\n      },\n      () => {\n        this.pos.x = p.x;\n        this.pos.y = p.y;\n      },\n      t\n    );\n  }\n  /**\n   * @param {Vector} p\n   * @param {Number} t - optional\n   * @returns {Promise}\n   */\n  move(p, t = 0) {\n    const changeX = p.x / (t * fps);\n    const changeY = p.y / (t * fps);\n    const startPos = new Point(this.pos.x, this.pos.y);\n\n    return transitionValues(\n      () => {\n        this.pos.x += p.x;\n        this.pos.y += p.y;\n      },\n      () => {\n        this.pos.x += changeX;\n        this.pos.y += changeY;\n      },\n      () => {\n        this.pos.x = startPos.x + p.x;\n        this.pos.y = startPos.y + p.y;\n      },\n      t\n    );\n  }\n}\n\nexport class Color {\n  /**\n   * @param {number} r\n   * @param {number} g\n   * @param {number} b\n   */\n  constructor(r, g, b) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n  /**\n   * @returns {Color}\n   */\n  clone() {\n    return new Color(this.r, this.g, this.b);\n  }\n  #compToHex(c) {\n    const hex = Math.round(c).toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n  }\n  /**\n   * @returns {string}\n   */\n  toHex() {\n    return '#' + this.#compToHex(this.r) + this.#compToHex(this.g) + this.#compToHex(this.b);\n  }\n}\n\nexport class Point extends Vector {\n  /**\n   * @param {number} x\n   * @param {number} y\n   */\n  constructor(x, y) {\n    super(x, y);\n  }\n  /**\n   * @returns {Point}\n   */\n  clone() {\n    return new Point(this.x, this.y);\n  }\n}\n\n// extend SimulationElement so it can be added to the\n// Simulation scene\nexport class SceneCollection extends SimulationElement {\n  /**\n   * @param {string} name - optional\n   */\n  constructor(name = '') {\n    super(new Point(0, 0));\n    this.name = name;\n    this.scene = [];\n    this.idObjs = {};\n  }\n  /**\n   * @param {SimulationElement} element\n   * @param {string} id - optional\n   */\n  add(element, id = null) {\n    if (element instanceof SimulationElement) {\n      if (this.sim != null) {\n        element.setSimulationElement(this.sim);\n      }\n      if (id != null) {\n        this.idObjs[id] = element;\n      } else {\n        this.scene.push(element);\n      }\n    } else {\n      console.warn('Invalid Element. Must be an instance of SimElement');\n    }\n  }\n  /**\n   * @param {string} id\n   */\n  removeWithId(id) {\n    delete this.idObjs[id];\n  }\n  /**\n   * @param {SimulationElement} element\n   */\n  removeWithObject(element) {\n    for (const el of this.scene) {\n      if (el == element) {\n        this.scene.splice(this.scene.indexOf(el), 1);\n        return;\n      }\n    }\n    for (const key of Object.keys(this.idObjs)) {\n      if (this.idObjs[key] == element) {\n        delete this.idObjs[key];\n        return;\n      }\n    }\n  }\n  /**\n   * @param {HTMLCanvasElement} sim\n   */\n  setSimulationElement(sim) {\n    this.sim = sim;\n    for (const element of this.scene) {\n      element.setSimulationElement(sim);\n    }\n  }\n  /**\n   * @param {CanvasRenderingContext2D} c\n   */\n  draw(c) {\n    for (const element of this.scene) {\n      element.draw(c);\n    }\n    for (const element of Object.values(this.idObjs)) {\n      element.draw(c);\n    }\n  }\n  empty() {\n    this.scene = [];\n    this.idObjs = {};\n  }\n}\n\nexport class Line extends SimulationElement {\n  /**\n   * @param {Point} p1\n   * @param {Point} p2\n   * @param {Color} color - optional\n   * @param {number} thickness - optional\n   * @param {number} r - optional\n   */\n  constructor(p1, p2, color = new Color(0, 0, 0), thickness = 1, r = 0) {\n    super(p1, color);\n    this.start = p1;\n    this.end = p2;\n    this.rotation = r;\n    this.thickness = thickness;\n    this.#setVector();\n  }\n  /**\n   * @returns {Line}\n   */\n  clone() {\n    return new Line(this.start, this.end, this.thickness, this.color, this.rotation);\n  }\n  /**\n   * @param {Point} p\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  setStart(p, t = 0) {\n    const xChange = (p.x - this.start.x) / (t * fps);\n    const yChange = (p.y - this.start.y) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.start = p;\n      },\n      () => {\n        this.start.x += xChange;\n        this.start.y += yChange;\n      },\n      () => {\n        this.start = p;\n      },\n      t\n    );\n  }\n  /**\n   * @param {Point} p\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  setEnd(p, t = 0) {\n    const xChange = (p.x - this.end.x) / (t * fps);\n    const yChange = (p.y - this.end.y) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.end = p;\n        this.#setVector();\n      },\n      () => {\n        this.end.x += xChange;\n        this.end.y += yChange;\n        this.#setVector();\n      },\n      () => {\n        this.end = p;\n        this.#setVector();\n      },\n      t\n    );\n  }\n  #setVector() {\n    this.vec = new Vector(this.end.x - this.start.x, this.end.y - this.start.y);\n    this.vec.rotateTo(this.rotation);\n  }\n  /**\n   * @param {number} deg\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  rotate(deg, t = 0) {\n    const rotationChange = deg / (t * fps);\n    const start = this.rotation;\n\n    return transitionValues(\n      () => {\n        this.rotation += deg;\n        this.vec.rotate(deg);\n      },\n      () => {\n        this.rotation += rotationChange;\n        this.vec.rotate(rotationChange);\n      },\n      () => {\n        this.rotation = start + deg;\n        this.rotation = minimizeRotation(this.rotation);\n      },\n      t\n    );\n  }\n  /**\n   * @param {number} deg\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  rotateTo(deg, t = 0) {\n    const rotationChange = (deg - this.rotation) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.rotation = deg;\n        this.vec.rotateTo(deg);\n      },\n      () => {\n        this.rotation += rotationChange;\n        this.vec.rotateTo(this.rotation);\n      },\n      () => {\n        this.rotation = deg;\n        this.rotation = minimizeRotation(this.rotation);\n        this.vec.rotateTo(deg);\n      },\n      t\n    );\n  }\n  /**\n   * @param {Point} p\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  moveTo(p, t = 0) {\n    return this.setStart(p, t);\n  }\n  /**\n   * @param {Vector} v\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  move(v, t = 0) {\n    return this.moveTo(this.start.add(v), t);\n  }\n  /**\n   * @param {CanvasRenderingContext2D} c\n   */\n  draw(c) {\n    this.vec.draw(c, new Point(this.start.x, this.start.y), this.color, this.thickness);\n  }\n}\n\nexport class Circle extends SimulationElement {\n  /**\n   * @param {Point} pos\n   * @param {number} radius\n   * @param {Color} color\n   */\n  constructor(pos, radius, color) {\n    super(pos, color);\n    this.radius = radius;\n    this.hovering = false;\n    this.events = [];\n  }\n  /**\n   * @returns {Circle}\n   */\n  clone() {\n    return new Circle(this.pos, this.radius, this.color);\n  }\n  /**\n   * @param {CanvasRenderingContext2D} c\n   */\n  draw(c) {\n    c.beginPath();\n    c.fillStyle = this.color.toHex();\n    c.arc(this.pos.x, this.pos.y, this.radius, 0, Math.PI * 2, false);\n    c.fill();\n    c.closePath();\n    this.#checkEvents();\n  }\n  /**\n   * @param {number} value\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  setRadius(value, t = 0) {\n    const radiusChange = (value - this.radius) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.radius = value;\n      },\n      () => {\n        this.radius += radiusChange;\n      },\n      () => {\n        this.radius = value;\n      },\n      t\n    );\n  }\n  /**\n   * @param {number} value\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  scale(value, t = 0) {\n    const radiusChange = (this.radius * value - this.radius) / (t * fps);\n    const finalValue = this.radius * value;\n\n    return transitionValues(\n      () => {\n        this.radius = finalValue;\n      },\n      () => {\n        this.radius += radiusChange;\n      },\n      () => {\n        this.radius = finalValue;\n      },\n      t\n    );\n  }\n  #checkEvents() {\n    this.events.forEach((event) => {\n      const name = event.name;\n      switch (name) {\n        case 'mouseover': {\n          if (!this.hovering && currentMousePos && this.contains(currentMousePos)) {\n            this.hovering = true;\n            event.callback(currentMouseEvent);\n          }\n          break;\n        }\n        case 'mouseleave': {\n          if (this.hovering && currentMousePos && !this.contains(currentMousePos)) {\n            this.hovering = false;\n            event.callback(currentMouseEvent);\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    });\n  }\n  /**\n   * @param {string} event\n   * @param {Function} callback\n   * @param {Function} callback2\n   */\n  on(event, callback1, callback2) {\n    if (!validEvents.includes(event)) {\n      console.warn(`Invalid event: ${event}. Event must be one of ${validEvents.join(', ')}`);\n      return;\n    }\n\n    // specific events\n    if (event === 'mousemove') {\n      this.sim.addEventListener('mousemove', (e) => {\n        const p = new Point(e.offsetX, e.offsetY);\n        if (this.contains(p)) {\n          callback1(e);\n        }\n      });\n    } else if (event === 'hover') {\n      this.on('mouseover', callback1);\n      this.on('mouseleave', callback2);\n    } else if (event === 'click') {\n      this.sim.addEventListener('click', (e) => {\n        const p = new Point(e.clientX, e.clientY);\n        if (this.contains(p)) {\n          callback1(e);\n        }\n      });\n    } else {\n      const newEvent = new Event(event, callback1);\n      this.events.push(newEvent);\n    }\n  }\n  /**\n   * @param {Point} p\n   * @returns {boolean}\n   */\n  contains(p) {\n    return distance(p, this.pos) < this.radius;\n  }\n}\n\nexport class Polygon extends SimulationElement {\n  /***\n   * @param {Color} color\n   * @param {Point[]} points\n   * @param {number} r - optional\n   * @param {Point} offsetPoint - optional\n   */\n  constructor(pos, points, color, r = 0, offsetPoint = new Point(0, 0)) {\n    super(pos, color);\n    this.rawPoints = points;\n    this.offsetPoint = offsetPoint;\n    this.offsetX = this.offsetPoint.x;\n    this.offsetY = this.offsetPoint.y;\n    this.points = points.map((p) => {\n      return new Point(p.x + this.offsetX, p.y + this.offsetY);\n    });\n    this.rotation = r;\n    this.#setRotation();\n  }\n  /**\n   * @param {Point[]} points\n   */\n  setPoints(points) {\n    this.points = points.map((p) => {\n      return new Point(p.x + this.offsetX, p.y + this.offsetY);\n    });\n  }\n  /**\n   * @returns {Polygon}\n   */\n  clone() {\n    return new Polygon(this.pos, this.rawPoints, this.color, this.rotation, this.offsetPoint);\n  }\n  /**\n   * @param {number} deg\n   */\n  rotate(deg) {\n    this.rotation += deg;\n    this.#setRotation();\n  }\n  /**\n   * @param {number} deg\n   */\n  rotateTo(deg) {\n    this.rotation = deg;\n    this.#setRotation();\n  }\n  #setRotation() {\n    this.rotation = minimizeRotation(this.rotation);\n    this.points = this.points.map((p) => {\n      p.rotateTo(this.rotation);\n      return p;\n    });\n  }\n  /**\n   * @param {CanvasRenderingContext2D} c\n   */\n  draw(c) {\n    c.beginPath();\n    c.fillStyle = this.color.toHex();\n    c.moveTo(this.points[0].x + this.pos.x, this.points[0].y + this.pos.y);\n    for (let i = 1; i < this.points.length; i++) {\n      c.lineTo(this.points[i].x + this.pos.x, this.points[i].y + this.pos.y);\n    }\n    c.fill();\n    c.closePath();\n  }\n}\n\nexport class Event {\n  /**\n   * @param {string} name\n   * @param {Function} callback\n   */\n  constructor(name, callback) {\n    this.name = name;\n    this.callback = callback;\n  }\n}\n\nexport class Square extends SimulationElement {\n  /**\n   * @param {Point} pos\n   * @param {number} width\n   * @param {number} height\n   * @param {Color} color\n   * @param {Point} offsetPoint - optional\n   * @param {number} rotation - optional\n   */\n  constructor(pos, width, height, color, offsetPoint = new Point(0, 0), rotation = 0) {\n    super(pos, color);\n    this.width = width;\n    this.height = height;\n    this.rotation = rotation;\n    this.showNodeVectors = false;\n    this.showCollisionVectors = false;\n    this.hovering = false;\n    this.events = [];\n    this.updateOffsetPosition(offsetPoint);\n  }\n  /**\n   * @param {Point} p - new position\n   */\n  updateOffsetPosition(p) {\n    this.offsetX = p.x;\n    this.offsetY = p.y;\n    this.topLeft = new Vector(-this.width / 2 - this.offsetX, -this.height / 2 - this.offsetY);\n    this.topRight = new Vector(this.width / 2 - this.offsetX, -this.height / 2 - this.offsetY);\n    this.bottomLeft = new Vector(-this.width / 2 - this.offsetX, this.height / 2 - this.offsetY);\n    this.bottomRight = new Vector(this.width / 2 - this.offsetX, this.height / 2 - this.offsetY);\n    this.#setRotation();\n  }\n  /**\n   * @param {boolean} show\n   */\n  setNodeVectors(show) {\n    this.showNodeVectors = show;\n  }\n  /**\n   * @param {boolean} show\n   */\n  setCollisionVectors(show) {\n    this.showCollisionVectors = show;\n  }\n  #setRotation() {\n    this.topLeft.rotateTo(this.rotation);\n    this.topRight.rotateTo(this.rotation);\n    this.bottomLeft.rotateTo(this.rotation);\n    this.bottomRight.rotateTo(this.rotation);\n  }\n  /**\n   * @param {number} deg\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  rotate(deg, t = 0) {\n    const startRotation = this.rotation;\n    const rotationChange = deg / (t * fps);\n\n    const func = () => {\n      this.rotation = startRotation + deg;\n      this.rotation = minimizeRotation(this.rotation);\n      this.#setRotation();\n    };\n\n    return transitionValues(\n      func,\n      () => {\n        this.rotation += rotationChange;\n        this.#setRotation();\n      },\n      func,\n      t\n    );\n  }\n  /**\n   * @param {number} deg\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  rotateTo(deg, t = 0) {\n    const rotationChange = (deg - this.rotation) / (t * fps);\n\n    const func = () => {\n      this.rotation = deg;\n      this.rotation = minimizeRotation(this.rotation);\n      this.#setRotation();\n    };\n\n    return transitionValues(\n      func,\n      () => {\n        this.rotation += rotationChange;\n        this.#setRotation();\n      },\n      func,\n      t\n    );\n  }\n  /**\n   * @param {CanvasRenderingContext2D} c\n   */\n  draw(c) {\n    c.beginPath();\n    c.fillStyle = this.color.toHex();\n    c.moveTo(this.pos.x + this.topLeft.x + this.offsetX, this.pos.y + this.topLeft.y + this.offsetY);\n    c.lineTo(this.pos.x + this.topRight.x + this.offsetX, this.pos.y + this.topRight.y + this.offsetY);\n    c.lineTo(this.pos.x + this.bottomRight.x + this.offsetX, this.pos.y + this.bottomRight.y + this.offsetY);\n    c.lineTo(this.pos.x + this.bottomLeft.x + this.offsetX, this.pos.y + this.bottomLeft.y + this.offsetY);\n    c.fill();\n    c.closePath();\n\n    if (this.showNodeVectors) {\n      this.topLeft.draw(c, new Point(this.pos.x + this.offsetX, this.pos.y + this.offsetY));\n      this.topRight.draw(c, new Point(this.pos.x + this.offsetX, this.pos.y + this.offsetY));\n      this.bottomLeft.draw(c, new Point(this.pos.x + this.offsetX, this.pos.y + this.offsetY));\n      this.bottomRight.draw(c, new Point(this.pos.x + this.offsetX, this.pos.y + this.offsetY));\n    }\n\n    if (this.showCollisionVectors) {\n      const testVecs = [this.v1, this.v2, this.v3, this.v4, this.v5];\n      if (testVecs.some((el) => el)) {\n        testVecs.forEach((vec) => vec.draw(c, new Point(this.pos.x, this.pos.y), new Color(0, 0, 255)));\n      }\n    }\n\n    this.#checkEvents();\n  }\n  /**\n   * @param {number} value\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  scale(value, t = 0) {\n    const topRightMag = this.topRight.mag;\n    const topLeftMag = this.topLeft.mag;\n    const bottomRightMag = this.bottomRight.mag;\n    const bottomLeftMag = this.bottomLeft.mag;\n\n    const topRightChange = (topRightMag * value - topRightMag) / (t * fps);\n    const topLeftChange = (topLeftMag * value - topLeftMag) / (t * fps);\n    const bottomRightChange = (bottomRightMag * value - bottomRightMag) / (t * fps);\n    const bottomLeftChange = (bottomLeftMag * value - bottomLeftMag) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.topRight.multiply(value);\n        this.topLeft.multiply(value);\n        this.bottomRight.multiply(value);\n        this.bottomLeft.multiply(value);\n\n        this.#updateDimensions();\n      },\n      () => {\n        this.topRight.appendMag(topRightChange);\n        this.topLeft.appendMag(topLeftChange);\n        this.bottomRight.appendMag(bottomRightChange);\n        this.bottomLeft.appendMag(bottomLeftChange);\n      },\n      () => {\n        this.topRight.normalize();\n        this.topRight.multiply(topRightMag * value);\n\n        this.topLeft.normalize();\n        this.topLeft.multiply(topLeftMag * value);\n\n        this.bottomRight.normalize();\n        this.bottomRight.multiply(bottomRightMag * value);\n\n        this.bottomLeft.normalize();\n        this.bottomLeft.multiply(bottomLeftMag * value);\n\n        this.#updateDimensions();\n      },\n      t\n    );\n  }\n  #getInitialStartAndMag() {\n    const topRightClone = this.topRight.clone();\n    const topLeftClone = this.topLeft.clone();\n    const bottomLeftClone = this.bottomLeft.clone();\n    const bottomRightClone = this.bottomRight.clone();\n    return {\n      topRightClone,\n      topLeftClone,\n      bottomLeftClone,\n      bottomRightClone\n    };\n  }\n  /**\n   * @param {string} component - x or y component of cloned Vector's magnitude\n   */\n  #getProcessedStartAndMag(component) {\n    const startAndMag = this.#getInitialStartAndMag();\n    const mags = Object.keys(startAndMag).reduce((prev, current, index) => {\n      let obj = {\n        ...prev\n      };\n      if (component) {\n        obj[current.replace('Clone', 'Mag')] = startAndMag[current][component];\n      } else {\n        obj[current.replace('Clone', 'Mag')] = current.mag;\n      }\n      return obj;\n    }, {});\n    return {\n      ...startAndMag,\n      ...mags\n    };\n  }\n  /**\n   * @param {value} value\n   * @param {value} t - optional\n   * @returns {Promise}\n   */\n  scaleWidth(value, t = 0) {\n    let {\n      topRightClone,\n      topLeftClone,\n      bottomRightClone,\n      bottomLeftClone,\n      topRightMag,\n      topLeftMag,\n      bottomRightMag,\n      bottomLeftMag\n    } = this.#getProcessedStartAndMag('x');\n    const topRightChange = (topRightMag * value - topRightMag) / (t * fps);\n    const topLeftChange = (topLeftMag * value - topLeftMag) / (t * fps);\n    const bottomRightChange = (bottomRightMag * value - bottomRightMag) / (t * fps);\n    const bottomLeftChange = (bottomLeftMag * value - bottomLeftMag) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.topRight.multiplyX(value);\n        this.topLeft.multiplyX(value);\n        this.bottomRight.multiplyX(value);\n        this.bottomLeft.multiplyX(value);\n\n        this.#updateDimensions();\n      },\n      () => {\n        this.topRight.appendX(topRightChange);\n        this.topLeft.appendX(topLeftChange);\n        this.bottomRight.appendX(bottomRightChange);\n        this.bottomLeft.appendX(bottomLeftChange);\n      },\n      () => {\n        topRightClone.setX(1);\n        topRightClone.multiplyX(topRightMag * value);\n        this.topRight = topRightClone.clone();\n\n        topLeftClone.setX(1);\n        topLeftClone.multiplyX(topLeftMag * value);\n        this.topLeft = topLeftClone.clone();\n\n        bottomRightClone.setX(1);\n        bottomRightClone.multiplyX(bottomRightMag * value);\n        this.bottomRight = bottomRightClone.clone();\n\n        bottomLeftClone.setX(1);\n        bottomLeftClone.multiplyX(bottomLeftMag * value);\n        this.bottomLeft = bottomLeftClone.clone();\n\n        this.#updateDimensions();\n      },\n      t\n    );\n  }\n  /**\n   *\n   * @param {number} value\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  scaleHeight(value, t = 0) {\n    let {\n      topRightClone,\n      topLeftClone,\n      bottomLeftClone,\n      bottomRightClone,\n      topRightMag,\n      topLeftMag,\n      bottomRightMag,\n      bottomLeftMag\n    } = this.#getProcessedStartAndMag('y');\n    const topRightChange = (topRightMag * value - topRightMag) / (t * fps);\n    const topLeftChange = (topLeftMag * value - topLeftMag) / (t * fps);\n    const bottomRightChange = (bottomRightMag * value - bottomRightMag) / (t * fps);\n    const bottomLeftChange = (bottomLeftMag * value - bottomLeftMag) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.topRight.multiplyY(value);\n        this.topLeft.multiplyY(value);\n        this.bottomRight.multiplyY(value);\n        this.bottomLeft.multiplyY(value);\n\n        this.#updateDimensions();\n      },\n      () => {\n        this.topRight.appendY(topRightChange);\n        this.topLeft.appendY(topLeftChange);\n        this.bottomRight.appendY(bottomRightChange);\n        this.bottomLeft.appendY(bottomLeftChange);\n      },\n      () => {\n        topRightClone.setY(1);\n        topRightClone.multiplyY(topRightMag * value);\n        this.topRight = topRightClone.clone();\n\n        topLeftClone.setY(1);\n        topLeftClone.multiplyY(topLeftMag * value);\n        this.topLeft = topLeftClone.clone();\n\n        bottomRightClone.setY(1);\n        bottomRightClone.multiplyY(bottomRightMag * value);\n        this.bottomRight = bottomRightClone.clone();\n\n        bottomLeftClone.setY(1);\n        bottomLeftClone.multiplyY(bottomLeftMag * value);\n        this.bottomLeft = bottomLeftClone.clone();\n\n        this.#updateDimensions();\n      },\n      t\n    );\n  }\n  /**\n   * @param {number} value\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  setWidth(value, t = 0) {\n    const scale = value / this.width;\n    return this.scaleWidth(scale, t);\n  }\n  /**\n   * @param {number} value\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  setHeight(value, t = 0) {\n    const scale = value / this.height;\n    return this.scaleHeight(scale, t);\n  }\n  /**\n   * @param {Point} p\n   * @returns {boolean}\n   */\n  contains(p) {\n    const topLeftVector = new Vector(this.topLeft.x, this.topLeft.y);\n    topLeftVector.rotateTo(-this.rotation);\n    this.v1 = topLeftVector;\n\n    const topRightVector = new Vector(this.topRight.x, this.topRight.y);\n    topRightVector.rotateTo(-this.rotation);\n    this.v2 = topRightVector;\n\n    const bottomLeftVector = new Vector(this.bottomLeft.x, this.bottomLeft.y);\n    bottomLeftVector.rotateTo(-this.rotation);\n    this.v3 = bottomLeftVector;\n\n    const bottomRightVector = new Vector(this.bottomRight.x, this.bottomRight.y);\n    bottomRightVector.rotateTo(-this.rotation);\n    this.v4 = bottomRightVector;\n\n    const cursorVector = new Vector(p.x - this.pos.x - this.offsetX, p.y - this.pos.y - this.offsetY);\n    cursorVector.rotateTo(-this.rotation);\n    this.v5 = cursorVector;\n\n    if (\n      cursorVector.x > bottomLeftVector.x &&\n      cursorVector.x < topRightVector.x &&\n      cursorVector.y > topLeftVector.y &&\n      cursorVector.y < bottomLeftVector.y\n    ) {\n      return true;\n    }\n    return false;\n  }\n  #updateDimensions() {\n    this.height = this.topRight.y + this.bottomRight.y;\n    this.width = this.topRight.x + this.topLeft.x;\n  }\n  #checkEvents() {\n    this.events.forEach((event) => {\n      const name = event.name;\n      switch (name) {\n        case 'mouseover': {\n          if (!this.hovering && currentMousePos && this.contains(currentMousePos)) {\n            this.hovering = true;\n            event.callback(currentMouseEvent);\n          }\n          break;\n        }\n        case 'mouseleave': {\n          if (this.hovering && currentMousePos && !this.contains(currentMousePos)) {\n            this.hovering = false;\n            event.callback(currentMouseEvent);\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    });\n  }\n  /**\n   * @param {string} event\n   * @param {Function} callback\n   * @param {Function} callback2\n   */\n  on(event, callback1, callback2 = () => {}) {\n    if (!validEvents.includes(event)) {\n      console.warn(`Invalid event: ${event}. Event must be one of ${validEvents.join(', ')}`);\n      return;\n    }\n\n    // specific events\n    if (event === 'mousemove') {\n      this.sim.addEventListener('mousemove', (e) => {\n        const p = new Point(e.clientX, e.clientY);\n        if (this.contains(p)) {\n          callback1(e);\n        }\n      });\n    } else if (event === 'click') {\n      this.sim.addEventListener('click', (e) => {\n        const p = new Point(e.clientX, e.clientY);\n        if (this.contains(p)) {\n          callback1(e);\n        }\n      });\n    } else if (event === 'hover') {\n      this.on('mouseover', callback1);\n      this.on('mouseleave', callback2);\n    } else {\n      const newEvent = new Event(event, callback1);\n      this.events.push(newEvent);\n    }\n  }\n  clone() {\n    return new Square(this.pos, this.width, this.height, this.color, this.offsetPoint, rotation);\n  }\n}\n\nexport class Arc extends SimulationElement {\n  /**\n   * @param {Point} pos\n   * @param {number} radius\n   * @param {number} startAngle\n   * @param {number} endAngle\n   * @param {number} thickness - optional\n   * @param {Circle} color - optional\n   * @param {number} rotation - optional\n   * @param {boolean} counterClockwise - optional\n   */\n  constructor(\n    pos,\n    radius,\n    startAngle,\n    endAngle,\n    thickness = 1,\n    color,\n    rotation = 0,\n    counterClockwise = false\n  ) {\n    super(pos, color);\n    this.radius = radius;\n    this.startAngle = startAngle;\n    this.endAngle = endAngle;\n    this.counterClockwise = counterClockwise;\n    this.thickness = thickness;\n    this.rotation = rotation;\n  }\n  /**\n   * @param {number} scale\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  scaleRadius(scale, t = 0) {\n    const initialRadius = this.radius;\n    const scaleChange = (this.radius * scale - this.radius) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.radius *= scale;\n      },\n      () => {\n        this.radius += scaleChange;\n      },\n      () => {\n        this.radius = initialRadius * scale;\n      },\n      t\n    );\n  }\n  /**\n   * @param {number} radius\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  setRadius(value, t = 0) {\n    const radChange = (value - this.radius) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.radius = value;\n      },\n      () => {\n        this.radius += radChange;\n      },\n      () => {\n        this.radius = value;\n      },\n      t\n    );\n  }\n  /**\n   * @param {number} val\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  setThickness(val, t = 0) {\n    const thicknessChange = (val - this.thickness) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.thickness = val;\n      },\n      () => {\n        this.thickness += thicknessChange;\n      },\n      () => {\n        this.thickness = val;\n      },\n      t\n    );\n  }\n  /**\n   * @param {number} angle\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  setStartAngle(angle, t = 0) {\n    const angleChange = (angle - this.startAngle) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.startAngle = angle;\n      },\n      () => {\n        this.startAngle += angleChange;\n      },\n      () => {\n        this.startAngle = angle;\n      },\n      t\n    );\n  }\n  /**\n   * @param {number} angle\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  setEndAngle(angle, t = 0) {\n    const angleChange = (angle - this.endAngle) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.endAngle = angle;\n      },\n      () => {\n        this.endAngle += angleChange;\n      },\n      () => {\n        this.endAngle = angle;\n      },\n      t\n    );\n  }\n  /**\n   * @param {number} amount\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  rotate(amount, t = 0) {\n    const initialRotation = this.rotation;\n    const rotationChange = (this.rotation + amount - this.rotation) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.rotation += scale;\n      },\n      () => {\n        this.rotation += rotationChange;\n      },\n      () => {\n        this.rotation = initialRotation + amount;\n      },\n      t\n    );\n  }\n  /**\n   * @param {number} deg\n   * @param {number} t - optional\n   * @returns {Promise}\n   */\n  rotateTo(deg, t = 0) {\n    const rotationChange = (deg - this.rotation) / (t * fps);\n\n    return transitionValues(\n      () => {\n        this.rotation = deg;\n      },\n      () => {\n        this.rotation += rotationChange;\n      },\n      () => {\n        this.rotation = deg;\n      },\n      t\n    );\n  }\n  draw(c) {\n    c.beginPath();\n    c.strokeStyle = this.color.toHex();\n    c.lineWidth = this.thickness;\n    c.arc(\n      this.pos.x,\n      this.pos.y,\n      this.radius,\n      degToRad(this.startAngle + this.rotation),\n      degToRad(this.endAngle + this.rotation),\n      this.counterClockwise\n    );\n    c.stroke();\n    c.closePath();\n  }\n}\n\nfunction getPixelRatio(c) {\n  const dpr = window.devicePixelRatio || 1;\n  const bsr =\n    c.webkitBackingStorePixelRatio ||\n    c.mozBackingStorePixelRatio ||\n    c.msBackingStorePixelRatio ||\n    c.oBackingStorePixelRatio ||\n    c.backingStorePixelRatio ||\n    1;\n\n  return dpr / bsr;\n}\n\nexport class Simulation {\n  /**\n   * @param {string} id - canvas id\n   * @param {number} frameRate - optional\n   */\n  constructor(id, frameRate = 60) {\n    fps = frameRate;\n    this.scene = [];\n    this.idObjs = {};\n    this.fitting = false;\n    this.bgColor = '#ffffff';\n\n    this.canvas = document.getElementById(id);\n    if (!this.canvas) {\n      console.warn(`Canvas with id \"${id}\" not found`);\n      return;\n    }\n    this.canvas.addEventListener('mousemove', (e) => {\n      currentMousePos = new Point(e.offsetX, e.offsetY);\n      currentMouseEvent = e;\n    });\n\n    window.addEventListener('resize', () => this.#resizeCanvas(this.canvas));\n    this.#resizeCanvas(this.canvas);\n\n    const ctx = this.canvas.getContext('2d');\n    ctx.scale(2, 2);\n\n    this.#render(ctx);\n  }\n  #render(c) {\n    c.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    c.beginPath();\n    c.fillStyle = this.bgColor;\n    c.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    c.closePath();\n\n    for (const element of this.scene) {\n      element.draw(c);\n    }\n    Object.values(this.idObjs).forEach((element) => {\n      element.draw(c);\n    });\n    window.requestAnimationFrame(() => this.#render(c));\n  }\n  /**\n   * @param {SimulationElement} element\n   * @param {String} id - optional\n   */\n  add(element, id = null) {\n    if (element instanceof SimulationElement) {\n      element.setSimulationElement(this.canvas);\n      if (id !== null) {\n        this.idObjs[id] = element;\n      } else {\n        this.scene.push(element);\n      }\n    } else {\n      console.warn('Invalid Element. Must be an instance of SimElement');\n    }\n  }\n  /**\n   * @param {string} id\n   */\n  removeWithId(id) {\n    if (this.idObjs[id] !== undefined) {\n      delete this.idObjs[id];\n    }\n  }\n  /**\n   * @param {SimulationElement} element\n   */\n  removeWithObject(element) {\n    for (const el of this.scene) {\n      if (compare(el, element)) {\n        this.scene.splice(this.scene.indexOf(el), 1);\n        return;\n      }\n    }\n    for (const key of Object.keys(this.idObjs)) {\n      if (compare(this.idObjs[key], element)) {\n        delete this.idObjs[key];\n      }\n    }\n  }\n  /**\n   * @param {string} event\n   * @param {Function} callback\n   * @returns\n   */\n  on(event, callback) {\n    if (!this.canvas) return;\n    this.canvas.addEventListener(event, callback);\n  }\n  fitElement() {\n    if (!this.canvas) return;\n    this.fitting = true;\n    this.#resizeCanvas(this.canvas);\n  }\n  /**\n   * @param {number} x\n   * @param {number} y\n   */\n  setSize(x, y) {\n    if (!this.canvas) return;\n    this.canvas.width = x;\n    this.canvas.height = y;\n    this.fitting = false;\n  }\n  /**\n   * @param {Color} color\n   */\n  setBgColor(color) {\n    if (color instanceof Color) {\n      this.bgColor = color.toHex();\n    } else {\n      console.warn('Invalid color. Must be an instance of Color object');\n    }\n  }\n  #resizeCanvas(c) {\n    const ratio = getPixelRatio(c);\n    if (!this.canvas) return;\n    this.width = this.canvas.width;\n    this.height = this.canvas.height;\n    if (this.fitting) {\n      const width = c.parentElement.clientWidth;\n      const height = c.parentElement.clientHeight;\n      this.canvas.width = width * ratio;\n      this.canvas.height = height * ratio;\n      this.canvas.style.width = width + 'px';\n      this.canvas.style.height = height + 'px';\n    }\n  }\n  empty() {\n    this.scene = [];\n    this.idObjs = {};\n  }\n}\n\n/**\n * @param {number} num\n * @returns {number}\n */\nexport function abs(num) {\n  return Math.abs(num);\n}\n\n/**\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport function pythag(x, y) {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n}\n\n/***\n * @param {Point} p1\n * @param {Point} p2\n * @returns {number}\n */\nexport function distance(p1, p2) {\n  return pythag(p1.x - p2.x, p1.y - p2.y);\n}\n\n/**\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport function atan2(x, y) {\n  return Math.atan2(y, x);\n}\n\n/**\n * @param {number} deg\n * @returns {number}\n */\nexport function degToRad(deg) {\n  return (deg * Math.PI) / 180;\n}\n\n/**\n * @param {number} rad\n * @returns {number}\n */\nexport function radToDeg(rad) {\n  return (rad * 180) / Math.PI;\n}\n\nfunction minimizeRotation(rotation) {\n  while (rotation > 360) rotation -= 360;\n  return rotation;\n}\n\n/**\n * @param {Function} callback1 - called when t is 0\n * @param {Function} callback2 - called every frame until the animation is finished\n * @param {Function} callback3 - called after animation is finished\n * @param {number} t - animation time (seconds)\n * @returns {Promise}\n */\nexport function transitionValues(callback1, callback2, callback3, t) {\n  return new Promise((resolve, reject) => {\n    if (t == 0) {\n      callback1();\n      resolve();\n    } else {\n      const times = t * fps;\n      let looped = 0;\n      const step = () => {\n        callback2();\n        if (looped < times) {\n          looped++;\n          window.requestAnimationFrame(step);\n        } else {\n          callback3();\n          resolve();\n        }\n      };\n      window.requestAnimationFrame(step);\n    }\n  });\n}\n\n/**\n *\n * @param {any} val1\n * @param {any} val2\n * @returns {boolean}\n */\nexport function compare(val1, val2) {\n  const nullUndefArr = [null, undefined];\n  if (nullUndefArr.includes(val1) || nullUndefArr.includes(val2)) {\n    if (val1 === val2) return true;\n    return false;\n  }\n  if (typeof val1 !== typeof val2) return false;\n\n  if (Array.isArray(val1)) {\n    for (let i = 0; i < val1.length; i++) {\n      if (!compare(val1[i], val2[i])) return false;\n    }\n    return true;\n  }\n\n  if (typeof val1 === 'object') {\n    const compareForKeys = (keys, obj1, obj2) => {\n      for (let i = 0; i < keys.length; i++) {\n        if (typeof obj1[keys[i]] !== typeof obj2[keys[i]]) {\n          return false;\n        }\n\n        if (typeof obj1[keys[i]] === 'object') {\n          return compare(obj1[keys[i]], obj2[keys[i]]);\n        }\n\n        if (obj1[keys[i]] !== obj2[keys[i]]) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    const obj1Keys = Object.keys(val1);\n    const obj2Keys = Object.keys(val2);\n\n    const key1Result = compareForKeys(obj1Keys, val1, val2);\n    const key2Result = compareForKeys(obj2Keys, val1, val2);\n\n    if (key1Result && key2Result) return true;\n    return false;\n  }\n\n  return val1 === val2;\n}\n\nexport default {\n  Vector,\n  SimulationElement,\n  Color,\n  Point,\n  SceneCollection,\n  Line,\n  Circle,\n  Polygon,\n  Square,\n  Simulation,\n  abs,\n  pythag,\n  distance,\n  atan2,\n  degToRad,\n  radToDeg,\n  transitionValues,\n  compare\n};\n"],
  "mappings": "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",
  "names": ["_setRotation", "setRotation_fn", "_checkEvents", "checkEvents_fn", "rotation", "scale"]
}
